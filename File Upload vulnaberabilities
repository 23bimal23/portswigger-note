File Upload vulnaberabilities




Lab: Remote code execution via web shell upload

  This lab contains a vulnerable image upload function. It doesn't perform any validation on the files users upload before storing them on the server's filesystem.
 To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner.
 You can log in to your own account using the following credentials: wiener:peter 
 ->login using given credentials 
 -> upload php shell on upload tab <?php echo file_get_contents('/home/carlos/secret'); ?> and intercept it and forward and open the uploaded file


Lab: Web shell upload via Content-Type restriction bypass 
 This lab contains a vulnerable image upload function. It attempts to prevent users from uploading unexpected file types
 but relies on checking user-controllable input to verify this.
 To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. 
 Submit this secret using the button provided in the lab banner. 
 >login using given credentials 
 -> upload php shell on upload tab <?php echo file_get_contents('/home/carlos/secret'); ?> and intercept it and and change content type php from png 
 forward and open the uploaded file
  

Lab: Web shell upload via path traversal
 This lab contains a vulnerable image upload function. The server is configured to prevent execution of user-supplied files, 
 but this restriction can be bypassed by exploiting a secondary vulnerability.
 To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. 
 Submit this secret using the button provided in the lab banner. 
 >login using given credentials 
 -> upload php shell on upload tab <?php echo file_get_contents('/home/carlos/secret'); ?> using php extension and intercept it and and change content type php from png 
 forward 
 and use path traversal ../ and url encode it and send it from burp repeater
 and open the uploaded file

Lab: Web shell upload via extension blacklist bypass

 This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, 
 but this defense can be bypassed due to a fundamental flaw in the configuration of this blacklist.
 To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret.
 Submit this secret using the button provided in the lab banner.
 You can log in to your own account using the following credentials: wiener:peter
 Hint
 You need to upload two different files to solve this lab.
 Log in and upload an image as your avatar, then go back to your account page.
 In Burp, go to Proxy > HTTP history and notice that your image was fetched using a GET request to /files/avatars/<YOUR-IMAGE>. Send this request to Burp Repeater.

    On your system, create a file called exploit.php containing a script for fetching the contents of Carlos's secret. For example:
    <?php echo file_get_contents('/home/carlos/secret'); ?>
    Attempt to upload this script as your avatar. The response indicates that you are not allowed to upload files with a .php extension.
    In Burp's proxy history, find the POST /my-account/avatar request that was used to submit the file upload. In the response, notice that the headers reveal that you're talking to an Apache server. Send this request to Burp Repeater.
    In Burp Repeater, go to the tab for the POST /my-account/avatar request and find the part of the body that relates to your PHP file. Make the following changes:
        Change the value of the filename parameter to .htaccess.
        Change the value of the Content-Type header to text/plain.

        Replace the contents of the file (your PHP payload) with the following Apache directive:
        AddType application/x-httpd-php .l33t

        This maps an arbitrary extension (.l33t) to the executable MIME type application/x-httpd-php. As the server uses the mod_php module, it knows how to handle this already.
    Send the request and observe that the file was successfully uploaded.
    Use the back arrow in Burp Repeater to return to the original request for uploading your PHP exploit.
    Change the value of the filename parameter from exploit.php to exploit.l33t. Send the request again and notice that the file was uploaded successfully.
    Switch to the other Repeater tab containing the GET /files/avatars/<YOUR-IMAGE> request. In the path, replace the name of your image file with exploit.l33t and send the request. Observe that Carlos's secret was returned in the response. Thanks to our malicious .htaccess file, the .l33t file was executed as if it were a .php file.
    Submit the secret to solve the lab.


Lab: Web shell upload via obfuscated file extension
 This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, but this defense can be bypassed using a classic obfuscation technique.
 To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner.
 You can log in to your own account using the following credentials: wiener:peter 
          Log in and upload an image as your avatar, then go back to your account page.
    In Burp, go to Proxy > HTTP history and notice that your image was fetched using a GET request to /files/avatars/<YOUR-IMAGE>. Send this request to Burp Repeater.

    On your system, create a file called exploit.php, containing a script for fetching the contents of Carlos's secret. For example:
    <?php echo file_get_contents('/home/carlos/secret'); ?>
    Attempt to upload this script as your avatar. The response indicates that you are only allowed to upload JPG and PNG files.
    In Burp's proxy history, find the POST /my-account/avatar request that was used to submit the file upload. Send this to Burp Repeater.

    In Burp Repeater, go to the tab for the POST /my-account/avatar request and find the part of the body that relates to your PHP file. In the Content-Disposition header, change the value of the filename parameter to include a URL encoded null byte, followed by the .jpg extension:
    filename="exploit.php%00.jpg"
    Send the request and observe that the file was successfully uploaded. Notice that the message refers to the file as exploit.php, suggesting that the null byte and .jpg extension have been stripped.
    Switch to the other Repeater tab containing the GET /files/avatars/<YOUR-IMAGE> request. In the path, replace the name of your image file with exploit.php and send the request. Observe that Carlos's secret was returned in the response.
    Submit the secret to solve the lab.

Lab: Remote code execution via polyglot web shell upload
 This lab contains a vulnerable image upload function. Although it checks the contents of the file to verify that it is a genuine image, 
 it is still possible to upload and execute server-side code.
 To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret.
 Submit this secret using the button provided in the lab banner.
 You can log in to your own account using the following credentials: wiener:peter 
 Log in and attempt to upload the script as your avatar. Observe that the server successfully blocks you from uploading files that aren't images, 
 even if you try using some of the techniques you've learned in previous labs.

 Create a polyglot PHP/JPG file that is fundamentally a normal image, but contains your PHP payload in its metadata.
 A simple way of doing this is to download and run ExifTool from the command line as follows: 
 exiftool -Comment="<?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?>" <YOUR-INPUT-IMAGE>.jpg -o polyglot.php
 This adds your PHP payload to the image's Comment field, then saves the image with a .php extension.
 In your browser, upload the polyglot image as your avatar, then go back to your account page.
 In Burp's proxy history, find the GET /files/avatars/polyglot.php request. 
 Use the message editor's search feature to find the START string somewhere within the binary image data in the response. Between this and the END string, 
 you should see Carlos's secret, for example:
 START 2B2tlPyJQfJDynyKME5D02Cw0ouydMpZ END
 Submit the secret to solve the lab.










  





